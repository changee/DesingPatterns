/*
 
软件设计的一些原则

可维护，可扩展，可复用，灵活性好

单一职责原则（SRP）：就一个类而言，应该仅有一个引起它变化的原因[ASD].
如果一个类承担的职责过多，就等于吧这些职责耦合在一起，一个职责的变化可能会消弱或者抑制这个类完成其他职责的能力.
这种耦合回导致脆弱的设计，当发生变化时，设计会遭受到意想不到的破坏.
所以，软件设计做的事情就是发现职责并把职责相互分离.


开放-封闭原则：类、模块、函数等，这些实体应该可以扩展，但是不可修改（对扩展是开发的，对修改是封闭的）
设计时，应该构造抽象，来隔离有可能变动的种类，同时也应该仅对程序中频繁变化的部分做抽象。
（面对新需求，对程序的改动是增加新扩展，而不是更改现有的代码；这就是开发-封闭的意义所在）


依赖倒转原则：高层跟低层都应该依赖抽象接口
例如，低层封装了数据库操作，高层实现业务逻辑；如果高层依赖低层，那么不利于换数据库；如果低层依赖高层，那么低层无法复用；
所以应该两边依赖抽象接口.


里氏代换原则：一个实体，父类的行为一定适用于子类（子类必须能能够完整替换父类行为，且程序行为没有变化）
比如鸟能飞，企鹅不能飞，所以在编程的世界里，企鹅不能继承于鸟类.


*/